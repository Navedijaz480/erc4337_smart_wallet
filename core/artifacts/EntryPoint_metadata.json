{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "preOpGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "paid",
						"type": "uint256"
					},
					{
						"internalType": "uint48",
						"name": "validAfter",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "validUntil",
						"type": "uint48"
					},
					{
						"internalType": "bool",
						"name": "targetSuccess",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "targetResult",
						"type": "bytes"
					}
				],
				"name": "ExecutionResult",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "opIndex",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "FailedOp",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "SenderAddressResult",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregator",
						"type": "address"
					}
				],
				"name": "SignatureValidationFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "preOpGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "prefund",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "sigFailed",
								"type": "bool"
							},
							{
								"internalType": "uint48",
								"name": "validAfter",
								"type": "uint48"
							},
							{
								"internalType": "uint48",
								"name": "validUntil",
								"type": "uint48"
							},
							{
								"internalType": "bytes",
								"name": "paymasterContext",
								"type": "bytes"
							}
						],
						"internalType": "struct IEntryPoint.ReturnInfo",
						"name": "returnInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unstakeDelaySec",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakeManager.StakeInfo",
						"name": "senderInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unstakeDelaySec",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakeManager.StakeInfo",
						"name": "factoryInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unstakeDelaySec",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakeManager.StakeInfo",
						"name": "paymasterInfo",
						"type": "tuple"
					}
				],
				"name": "ValidationResult",
				"type": "error"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "preOpGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "prefund",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "sigFailed",
								"type": "bool"
							},
							{
								"internalType": "uint48",
								"name": "validAfter",
								"type": "uint48"
							},
							{
								"internalType": "uint48",
								"name": "validUntil",
								"type": "uint48"
							},
							{
								"internalType": "bytes",
								"name": "paymasterContext",
								"type": "bytes"
							}
						],
						"internalType": "struct IEntryPoint.ReturnInfo",
						"name": "returnInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unstakeDelaySec",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakeManager.StakeInfo",
						"name": "senderInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unstakeDelaySec",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakeManager.StakeInfo",
						"name": "factoryInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unstakeDelaySec",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakeManager.StakeInfo",
						"name": "paymasterInfo",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "aggregator",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "stake",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "unstakeDelaySec",
										"type": "uint256"
									}
								],
								"internalType": "struct IStakeManager.StakeInfo",
								"name": "stakeInfo",
								"type": "tuple"
							}
						],
						"internalType": "struct IEntryPoint.AggregatorStakeInfo",
						"name": "aggregatorInfo",
						"type": "tuple"
					}
				],
				"name": "ValidationResultWithAggregation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "factory",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "paymaster",
						"type": "address"
					}
				],
				"name": "AccountDeployed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalDeposit",
						"type": "uint256"
					}
				],
				"name": "Deposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "aggregator",
						"type": "address"
					}
				],
				"name": "SignatureAggregatorChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalStaked",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "unstakeDelaySec",
						"type": "uint256"
					}
				],
				"name": "StakeLocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "withdrawTime",
						"type": "uint256"
					}
				],
				"name": "StakeUnlocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "withdrawAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "StakeWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "paymaster",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "actualGasCost",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "actualGasUsed",
						"type": "uint256"
					}
				],
				"name": "UserOperationEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "revertReason",
						"type": "bytes"
					}
				],
				"name": "UserOperationRevertReason",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "withdrawAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdrawn",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "SIG_VALIDATION_FAILED",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "initCode",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "paymasterAndData",
						"type": "bytes"
					}
				],
				"name": "_validateSenderAndPaymaster",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "unstakeDelaySec",
						"type": "uint32"
					}
				],
				"name": "addStake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "depositTo",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "deposits",
				"outputs": [
					{
						"internalType": "uint112",
						"name": "deposit",
						"type": "uint112"
					},
					{
						"internalType": "bool",
						"name": "staked",
						"type": "bool"
					},
					{
						"internalType": "uint112",
						"name": "stake",
						"type": "uint112"
					},
					{
						"internalType": "uint32",
						"name": "unstakeDelaySec",
						"type": "uint32"
					},
					{
						"internalType": "uint48",
						"name": "withdrawTime",
						"type": "uint48"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getDepositInfo",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint112",
								"name": "deposit",
								"type": "uint112"
							},
							{
								"internalType": "bool",
								"name": "staked",
								"type": "bool"
							},
							{
								"internalType": "uint112",
								"name": "stake",
								"type": "uint112"
							},
							{
								"internalType": "uint32",
								"name": "unstakeDelaySec",
								"type": "uint32"
							},
							{
								"internalType": "uint48",
								"name": "withdrawTime",
								"type": "uint48"
							}
						],
						"internalType": "struct IStakeManager.DepositInfo",
						"name": "info",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "initCode",
						"type": "bytes"
					}
				],
				"name": "getSenderAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					}
				],
				"name": "getUserOpHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "sender",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "nonce",
										"type": "uint256"
									},
									{
										"internalType": "bytes",
										"name": "initCode",
										"type": "bytes"
									},
									{
										"internalType": "bytes",
										"name": "callData",
										"type": "bytes"
									},
									{
										"internalType": "uint256",
										"name": "callGasLimit",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "verificationGasLimit",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "preVerificationGas",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maxFeePerGas",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maxPriorityFeePerGas",
										"type": "uint256"
									},
									{
										"internalType": "bytes",
										"name": "paymasterAndData",
										"type": "bytes"
									},
									{
										"internalType": "bytes",
										"name": "signature",
										"type": "bytes"
									}
								],
								"internalType": "struct UserOperation[]",
								"name": "userOps",
								"type": "tuple[]"
							},
							{
								"internalType": "contract IAggregator",
								"name": "aggregator",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
						"name": "opsPerAggregator",
						"type": "tuple[]"
					},
					{
						"internalType": "address payable",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "handleAggregatedOps",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation[]",
						"name": "ops",
						"type": "tuple[]"
					},
					{
						"internalType": "address payable",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "handleOps",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "callData",
						"type": "bytes"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "sender",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "nonce",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "callGasLimit",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "verificationGasLimit",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "preVerificationGas",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "paymaster",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "maxFeePerGas",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maxPriorityFeePerGas",
										"type": "uint256"
									}
								],
								"internalType": "struct EntryPoint.MemoryUserOp",
								"name": "mUserOp",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "userOpHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "prefund",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "contextOffset",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preOpGas",
								"type": "uint256"
							}
						],
						"internalType": "struct EntryPoint.UserOpInfo",
						"name": "opInfo",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					}
				],
				"name": "innerHandleOp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "actualGasCost",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "op",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "targetCallData",
						"type": "bytes"
					}
				],
				"name": "simulateHandleOp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					}
				],
				"name": "simulateValidation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlockStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "withdrawAddress",
						"type": "address"
					}
				],
				"name": "withdrawStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "withdrawAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "withdrawAmount",
						"type": "uint256"
					}
				],
				"name": "withdrawTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"FailedOp(uint256,string)": [
					{
						"params": {
							"opIndex": "- index into the array of ops to the failed one (in simulateValidation, this is always zero)",
							"reason": "- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."
						}
					}
				],
				"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
					{
						"params": {
							"factoryInfo": "stake information about the factory (if any)",
							"paymasterInfo": "stake information about the paymaster (if any)",
							"returnInfo": "gas and time-range returned values",
							"senderInfo": "stake information about the sender"
						}
					}
				],
				"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
					{
						"params": {
							"aggregatorInfo": "signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation",
							"factoryInfo": "stake information about the factory (if any)",
							"paymasterInfo": "stake information about the paymaster (if any)",
							"returnInfo": "gas and time-range returned values",
							"senderInfo": "stake information about the sender"
						}
					}
				]
			},
			"kind": "dev",
			"methods": {
				"addStake(uint32)": {
					"params": {
						"unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
					}
				},
				"getDepositInfo(address)": {
					"returns": {
						"info": "- full deposit information of given account"
					}
				},
				"getSenderAddress(bytes)": {
					"params": {
						"initCode": "the constructor code to be passed into the UserOperation."
					}
				},
				"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
					"params": {
						"beneficiary": "the address to receive the fees",
						"opsPerAggregator": "the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"
					}
				},
				"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
					"params": {
						"beneficiary": "the address to receive the fees",
						"ops": "the operations to execute"
					}
				},
				"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": {
					"params": {
						"op": "the UserOperation to simulate",
						"target": "if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.",
						"targetCallData": "callData to pass to target address"
					}
				},
				"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"details": "this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.",
					"params": {
						"userOp": "the user operation to validate."
					}
				},
				"withdrawStake(address)": {
					"params": {
						"withdrawAddress": "the address to send withdrawn value."
					}
				},
				"withdrawTo(address,uint256)": {
					"params": {
						"withdrawAddress": "the address to send withdrawn value.",
						"withdrawAmount": "the amount to withdraw."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)": [
					{
						"notice": "return value of simulateHandleOp"
					}
				],
				"FailedOp(uint256,string)": [
					{
						"notice": "a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
					}
				],
				"SenderAddressResult(address)": [
					{
						"notice": "return value of getSenderAddress"
					}
				],
				"SignatureValidationFailed(address)": [
					{
						"notice": "error case when a signature aggregator fails to verify the aggregated signature it had created."
					}
				],
				"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
					{
						"notice": "Successful result from simulateValidation."
					}
				],
				"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
					{
						"notice": "Successful result from simulateValidation, if the account returns a signature aggregator"
					}
				]
			},
			"events": {
				"AccountDeployed(bytes32,address,address,address)": {
					"notice": "account \"sender\" was deployed."
				},
				"SignatureAggregatorChanged(address)": {
					"notice": "signature aggregator used by the following UserOperationEvents within this bundle."
				},
				"StakeLocked(address,uint256,uint256)": {
					"notice": "Emitted when stake or unstake delay are modified"
				},
				"StakeUnlocked(address,uint256)": {
					"notice": "Emitted once a stake is scheduled for withdrawal"
				},
				"UserOperationRevertReason(bytes32,address,uint256,bytes)": {
					"notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length"
				}
			},
			"kind": "user",
			"methods": {
				"SIG_VALIDATION_FAILED()": {
					"notice": "for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value in case of signature failure, instead of revert."
				},
				"_validateSenderAndPaymaster(bytes,address,bytes)": {
					"notice": "Called only during simulation. This function always reverts to prevent warm/cold storage differentiation in simulation vs execution."
				},
				"addStake(uint32)": {
					"notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
				},
				"balanceOf(address)": {
					"notice": "return the deposit (for gas payment) of the account"
				},
				"depositTo(address)": {
					"notice": "add to the deposit of the given account"
				},
				"deposits(address)": {
					"notice": "maps paymaster to their deposits and stakes"
				},
				"getSenderAddress(bytes)": {
					"notice": "Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"
				},
				"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"notice": "generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
				},
				"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
					"notice": "Execute a batch of UserOperation with Aggregators"
				},
				"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
					"notice": "Execute a batch of UserOperations. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."
				},
				"innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)": {
					"notice": "inner function to handle a UserOperation. Must be declared \"external\" to open a call context, but it can only be called by handleOps."
				},
				"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": {
					"notice": "simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."
				},
				"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"notice": "Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."
				},
				"unlockStake()": {
					"notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
				},
				"withdrawStake(address)": {
					"notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
				},
				"withdrawTo(address,uint256)": {
					"notice": "withdraw from the deposit."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"core/EntryPoint.sol": "EntryPoint"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"core/EntryPoint.sol": {
			"keccak256": "0xd9a57231a5c0a68cb5c6094c5a471ece0374d9e2c0603d5f426bf18477811dd0",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://abd6cabee6c3a49fa8daded7266bbc2902d236b746a5f325035e5243abc98291",
				"dweb:/ipfs/QmRESkKQMX2X6PxvvpisvcKvgnPDUB2E4bEGvtP1J3SCt2"
			]
		},
		"core/Helpers.sol": {
			"keccak256": "0xad3c3104f142441ab0e97f9eb5ccf87c3e4cd3ecf5b435e68a848b4a856b1a48",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6b0a564733871e68b5520b6d29f438dfdc0f1ef2364b63bb59ab70190719a871",
				"dweb:/ipfs/QmW6GGAHh8BJHAqBRm9yuFLgHwhK7AQ4KoGuj9pesNrrfH"
			]
		},
		"core/SenderCreator.sol": {
			"keccak256": "0xd4d490295be9e759754a0ae568bd6a29ed1c57a1469d30fea0343462e1c9fcdf",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5e8143288fb0ab2d5d852c70044e7be64dfd8938b24405782bba986b57b8e008",
				"dweb:/ipfs/QmX1ohegN5FbFNcU7knRYiT41S1nPhF7TakED2TjNMcFy9"
			]
		},
		"core/StakeManager.sol": {
			"keccak256": "0x98dc01197b561acbbec614af551a578d31bb7288d661265eca5bebe70bc31ab2",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://fe619d35f5c8bf0d50214ebd4e3e0bb2e0d2e113d409e2ee6ae93fb2107cfdb3",
				"dweb:/ipfs/QmQcaHEaMebCU5TqS9y1otHQpZKULM89sDvKLr2qsBWpME"
			]
		},
		"interfaces/IAccount.sol": {
			"keccak256": "0x61473078f037bc1aa98d12750d7735f98eee408e71a5312cbe89bbbeb88bdecc",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://484351f56462921f943d2a72cb62ac6e1d4d31f06b6cbef9ac9f73e51b4dad69",
				"dweb:/ipfs/Qme64QVRcWZ62miGDQtS8HWjBqmPCcFcrWRVhCJTBNzjpR"
			]
		},
		"interfaces/IAggregator.sol": {
			"keccak256": "0x2e22a70ea95cc67f32d7c06549fb007d60507867e56d3ce64e80da3dde8eb134",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fd02a59f9f147102f768f4f2cde4ef980bd5c79bb5858b420abbfc8f1c40a200",
				"dweb:/ipfs/QmRo3Cvv1xFusbSdVACrDRra2TB5W1FKim4Yp46ein8aUx"
			]
		},
		"interfaces/IEntryPoint.sol": {
			"keccak256": "0xe0dd4652b814bbe97b3e9376cc84728e86f00658123bb1cb47aefd0184121919",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://680c776f785999367aae585f736fe717ff685ee418d3dce35723e1d5d2b2fd68",
				"dweb:/ipfs/Qme6YAKC2DP4B2y5YqgBJyKfizUVgBQbrmE4h5E2YoL7vx"
			]
		},
		"interfaces/IPaymaster.sol": {
			"keccak256": "0xffc7f82ac9e6c828befe53f24d84fb8d2c341cd1b81a67d3d9cf4b2409b83567",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://29314a4d971015cb8c2285986877d36d6af75c7be85be112d2e45249774318d0",
				"dweb:/ipfs/QmNkzjdgnjWhQHP6MXMerTGWGykWkhSWgqxagYyssJgnCE"
			]
		},
		"interfaces/IStakeManager.sol": {
			"keccak256": "0x95ff0f8d8faf7706d7e36035e4f8f140923dba29da22aff22fbec8420ac9caa2",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://5043c2a94f7f27a85ea4446d4359246a17afbe79c029bc90183ffafa6e5a2dbc",
				"dweb:/ipfs/Qmaw9sBwMpmzPGK1LAc1wXLhRyX2RMqUpirUrcP58ck6SS"
			]
		},
		"interfaces/UserOperation.sol": {
			"keccak256": "0x8230d96d03d77381d549965ea0acb324f01a243a34536c81f09d5e75f050e7d3",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e58f0c213feffdc3f9031d1c7db795c54f161d91ab7103821970d8a86794133a",
				"dweb:/ipfs/QmTeXQidedFBpnrkYFY65kngxUrBLDSwLcpq3bYM4P7Fsd"
			]
		},
		"utils/Exec.sol": {
			"keccak256": "0x457016b1fc508933de366b893fab6a942775d833e25bf3feb5bb6a030a00bb13",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://50ba921d91046ff9a51c82aeb1ffdae15a341b1c3ea1d4ced42c0729c4349723",
				"dweb:/ipfs/Qmdk3R356yuA3o5u2aLDjx7TQjumrU5cuhSyBWqaeBw3db"
			]
		}
	},
	"version": 1
}